apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: happy-cluster
  region: us-west-2
  version: "1.16"

availabilityZones:
- us-west-2a
- us-west-2b
- us-west-2c

nodeGroups:
- name: workers
  minSize: 3
  maxSize: 5
  instancesDistribution:
    instanceTypes:
    - m5.xlarge
    - r4.xlarge
    - r3.xlarge
    - t3.xlarge
    - t2.xlarge
    maxPrice: 1.0
    spotInstancePools: 2
    onDemandBaseCapacity: 0
    onDemandPercentageAboveBaseCapacity: 0
  volumeSize: 100
  volumeType: gp2
  ssh:
    allow: false
    # to override public key
    # publicKeyPath: ~/.ssh/id_rsa.pub
  tags:
    k8s.io/cluster-autoscaler/enabled: "true"
    k8s.io/cluster-autoscaler/happy-cluster: "owned"
  iam:
    # User notebook policy
    # This is often needed by data scientists
    # Who stores data in s3 and need quite powerful access
    # And pushes intermediate containers for distributed training to ECR
    attachPolicyARNs:
    - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
    # TODO: better if user will run: 
    # hub ext eks policy attach -p AmazonS3FullAccess
    # hub ext eks policy attach -p AmazonEC2ContainerRegistryFullAccess
    - arn:aws:iam::aws:policy/AmazonS3FullAccess
    - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
    withAddonPolicies:
      albIngress: true
      autoScaler: true
      cloudWatch: true
      certManager: true
      externalDNS: true
      # ebs: true

iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: happy-cluster
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    attachPolicy: # inline policy can be defined along with `attachPolicyARNs`
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "autoscaling:DescribeAutoScalingGroups"
        - "autoscaling:DescribeAutoScalingInstances"
        - "autoscaling:DescribeLaunchConfigurations"
        - "autoscaling:DescribeTags"
        - "autoscaling:SetDesiredCapacity"
        - "autoscaling:TerminateInstanceInAutoScalingGroup"
        # for external-dns
        - "route53:ChangeResourceRecordSets"
        - "route53:ListHostedZones"
        - "route53:ListResourceRecordSets"
        # read-write to s3 (hub or terraform state)
        - "s3:ListBucket"
        - "s3:*Object"
        # Reserved for future OIDC integration
        # - "sts:AssumeRoleWithWebIdentity"
        Resource: '*'

cloudWatch:
  clusterLogging:
    enableTypes: [audit, authenticator, controllerManager]
